package cola_test

import (
	TDACola "cola"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestPilaVacia(t *testing.T) {
	cola := TDACola.CrearColaEnlazada[int]()
	require.NotNil(t, cola)
	require.True(t, cola.EstaVacia())
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })
}

func TestOrdenEntrada(t *testing.T) {
	cola := TDACola.CrearColaEnlazada[string]()
	cola.Encolar("H")
	cola.Encolar("o")
	cola.Encolar("l")
	cola.Encolar("a")
	cola.Encolar(" ")
	cola.Encolar("A")
	cola.Encolar("l")
	cola.Encolar("g")
	cola.Encolar("o")
	cola.Encolar(" ")
	cola.Encolar("2")
	require.EqualValues(t, "H", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "H", cola.Desencolar())
	require.EqualValues(t, "o", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "o", cola.Desencolar())
	require.EqualValues(t, "l", cola.VerPrimero())
	require.EqualValues(t, "l", cola.Desencolar())
	require.EqualValues(t, "a", cola.VerPrimero())
	require.EqualValues(t, "a", cola.Desencolar())
	require.EqualValues(t, " ", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, " ", cola.Desencolar())
	require.EqualValues(t, "A", cola.VerPrimero())
	require.EqualValues(t, "A", cola.Desencolar())
	require.EqualValues(t, "l", cola.VerPrimero())
	require.EqualValues(t, "l", cola.Desencolar())
	require.EqualValues(t, "g", cola.VerPrimero())
	require.EqualValues(t, "g", cola.Desencolar())
	require.EqualValues(t, "o", cola.VerPrimero())
	require.EqualValues(t, "o", cola.Desencolar())
	require.EqualValues(t, " ", cola.VerPrimero())
	require.EqualValues(t, " ", cola.Desencolar())
	require.EqualValues(t, "2", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "2", cola.Desencolar())
	require.True(t, cola.EstaVacia())
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })
}

func TestVolumetria(t *testing.T) {
	cola := TDACola.CrearColaEnlazada[int]()
	for i := 0; i < 100000; i++ {
		cola.Encolar(i)
	}
	for i := 0; i < 100000; i++ {
		require.EqualValues(t, i, cola.VerPrimero())
		require.False(t, cola.EstaVacia())
		require.EqualValues(t, i, cola.Desencolar())
	}
	require.True(t, cola.EstaVacia())
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })
}

func TestCasosBase(t *testing.T) {
	cola := TDACola.CrearColaEnlazada[string]()
	cola.Encolar("P")
	cola.Encolar("R")
	cola.Encolar("U")
	cola.Encolar("E")
	cola.Encolar("B")
	cola.Encolar("A")
	require.EqualValues(t, "P", cola.VerPrimero())
	require.EqualValues(t, "P", cola.Desencolar())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "R", cola.VerPrimero())
	require.EqualValues(t, "R", cola.Desencolar())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "U", cola.VerPrimero())
	require.EqualValues(t, "U", cola.Desencolar())
	cola.Encolar(" ")
	cola.Encolar("F")
	cola.Encolar("U")
	cola.Encolar("N")
	cola.Encolar("C")
	cola.Encolar("I")
	cola.Encolar("O")
	cola.Encolar("N")
	cola.Encolar("A")
	require.EqualValues(t, "E", cola.VerPrimero())
	require.EqualValues(t, "E", cola.Desencolar())
	require.EqualValues(t, "B", cola.VerPrimero())
	require.EqualValues(t, "B", cola.Desencolar())
	require.EqualValues(t, "A", cola.VerPrimero())
	require.EqualValues(t, "A", cola.Desencolar())
	require.EqualValues(t, " ", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, " ", cola.Desencolar())
	require.EqualValues(t, "F", cola.VerPrimero())
	require.EqualValues(t, "F", cola.Desencolar())
	require.EqualValues(t, "U", cola.VerPrimero())
	require.EqualValues(t, "U", cola.Desencolar())
	require.EqualValues(t, "N", cola.VerPrimero())
	require.EqualValues(t, "N", cola.Desencolar())
	require.EqualValues(t, "C", cola.VerPrimero())
	require.EqualValues(t, "C", cola.Desencolar())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "I", cola.VerPrimero())
	require.EqualValues(t, "I", cola.Desencolar())
	require.EqualValues(t, "O", cola.VerPrimero())
	require.EqualValues(t, "O", cola.Desencolar())
	require.EqualValues(t, "N", cola.VerPrimero())
	require.EqualValues(t, "N", cola.Desencolar())
	require.EqualValues(t, "A", cola.VerPrimero())
	require.EqualValues(t, "A", cola.Desencolar())

	require.True(t, cola.EstaVacia())
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })

	cola.Encolar("P")
	require.False(t, cola.EstaVacia())
	cola.Encolar("A")
	cola.Encolar("R")
	cola.Encolar("E")
	cola.Encolar("C")
	cola.Encolar("E")
	cola.Encolar(" ")
	require.False(t, cola.EstaVacia())
	cola.Encolar("Q")
	cola.Encolar(" ")
	cola.Encolar("S")
	cola.Encolar("I")
	require.EqualValues(t, "P", cola.VerPrimero())
	require.EqualValues(t, "P", cola.Desencolar())
	require.EqualValues(t, "A", cola.VerPrimero())
	require.EqualValues(t, "A", cola.Desencolar())
	require.EqualValues(t, "R", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, "R", cola.Desencolar())
	require.EqualValues(t, "E", cola.VerPrimero())
	require.EqualValues(t, "E", cola.Desencolar())
	require.EqualValues(t, "C", cola.VerPrimero())
	require.EqualValues(t, "C", cola.Desencolar())
	require.EqualValues(t, "E", cola.VerPrimero())
	require.EqualValues(t, "E", cola.Desencolar())
	require.EqualValues(t, " ", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, " ", cola.Desencolar())
	require.EqualValues(t, "Q", cola.VerPrimero())
	require.EqualValues(t, "Q", cola.Desencolar())
	require.EqualValues(t, " ", cola.VerPrimero())
	require.False(t, cola.EstaVacia())
	require.EqualValues(t, " ", cola.Desencolar())
	require.EqualValues(t, "S", cola.VerPrimero())
	require.EqualValues(t, "S", cola.Desencolar())
	require.EqualValues(t, "I", cola.VerPrimero())
	require.EqualValues(t, "I", cola.Desencolar())

	require.True(t, cola.EstaVacia())
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.VerPrimero() })
	require.PanicsWithValue(t, "La cola esta vacia", func() { cola.Desencolar() })
}
